#find ./ -name *.txt
在当前目录下查找所有的txt文件

#字面量
var reg = /\bis\b/g;

#构造函数
var reg = new RegExp('\\bis\\b','g')

#修饰符
g: global 全文搜索,不添加则只搜索第一个
i: ignore case 忽略大小写，默认大小写敏感
m: 多行匹配

#元字符
元字符的含义在不同场景有不同的含义
正则表达式由两种基本字符类型组成
 - 原义文本字符 类似a,1等
 - 元字符
元字符是在正则表达式中有特殊含义的非字母字符
 * + ? $ ^ . | \ ( ) { } [ ] \t \v \n \r \0 \f \cX(ctrl + x)

#字符类
使用元字符[]构建一个简单的类
类是指符合某些特性的对象，一个泛指，而不是特指某个字符
表达式[abc]把字符a或b或c归为一类，表达式可以匹配这类的字符

#字符类取反
使用元字符^创建 反向类/负向类
反向类的意思是不属于某类的内容
表达式[^abc]表示 不是字符a或b或c的内容

#范围类
[a-z]来连接两个字符表示 从a到z的任意字符
这是个闭区间，也就是包含a和z本身
在[]组成的类内部是可以连写的[a-zA-Z]表示从a到z和从A到Z的任意字符

#预定义类
. 等价于[^\r\n] 除了回车符和换行符之外的所有字符
\d 等价于[0-9] 数字字符
\D 等价于[^0-9] 非数字字符
\s [\t\n\x0B\f\r] 空白符
\S [^\t\n\x0B\f\r] 非空白符
\w [a-zA-Z_0-9] 单词字符（字母、数字下划线）
\w [^a-zA-Z_0-9] 非单词字符

#边界
^ 以xxx开始
$ 以xxx结束
\b 单词边界
\B 非单词边界
